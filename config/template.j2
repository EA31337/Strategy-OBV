/**
 * @file
 * Defines default strategy parameter values for the given timeframe.
 */

// Defines indicator's parameter values for the given pair symbol and timeframe.
struct Indi_OBV_Params_{{ Timeframe }} : OBVParams {
  Indi_OBV_Params_{{ Timeframe }}() : OBVParams(indi_obv_defaults, PERIOD_{{ Timeframe }}) {
    applied_price = (ENUM_APPLIED_PRICE){{ OBV_Indi_OBV_Applied_Price | default(0) }};
    shift = {{ OBV_Indi_OBV_Shift | default(0) }};
  }
} indi_obv_{{ Timeframe | lower }};

// Defines strategy's parameter values for the given pair symbol and timeframe.
struct Stg_OBV_Params_{{ Timeframe }} : StgParams {
  // Struct constructor.
  Stg_OBV_Params_{{ Timeframe }}() : StgParams(stg_obv_defaults) {
    lot_size = {{ OBV_LotSize | default(0) }};
    signal_open_method = {{ OBV_SignalOpenMethod | default(0) }};
    signal_open_filter_method = {{ OBV_SignalOpenFilterMethod | default(1) }};
    signal_open_level = (float){{ OBV_SignalOpenLevel | default(0) }};
    signal_open_boost = {{ OBV_SignalOpenBoostMethod | default(0) }};
    signal_close_method = {{ OBV_SignalCloseMethod | default(0) }};
    signal_close_level = (float){{ OBV_SignalCloseLevel | default(0) }};
    price_stop_method = {{ OBV_PriceStopMethod | default(0) }};
    price_stop_level = (float){{ OBV_SignalCloseLevel | default(1) }};
    tick_filter_method = {{ OBV_TickFilterMethod  | default(1) }};
    max_spread = {{ OBV_MaxSpread | default(0) }};
  }
} stg_obv_{{ Timeframe | lower }};
